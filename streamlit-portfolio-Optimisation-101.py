# -*- coding: utf-8 -*-
"""streamlit-Portfolio-Optimisation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WS6puW9Hh5TADbNHXS0RnnXq8N_Ua_SN
"""

#!pip install yfinance
#!pip install streamlit

import pandas as pd
import yfinance as yf
import streamlit as st

# Fetch the list of S&P 500 constituents
def get_sp500_stocks():
    url = "https://raw.githubusercontent.com/datasets/s-and-p-500-companies/master/data/constituents.csv"
    stocks = pd.read_csv(url)
    # Replace invalid tickers
    stocks['Symbol'] = stocks['Symbol'].replace({'BRK.B': 'BRK-B', 'BF.B': 'BF-B'})
    return stocks

# Fetch real-time stock prices
def fetch_stock_prices(stocks):
    tickers = stocks['Symbol'].tolist()
    prices = yf.download(tickers, period='1mo')['Close']
    return prices.iloc[-1]  # Get the latest closing price

# Calculate the equal-weight allocations
def calculate_equal_weight(portfolio_size, stocks, prices):
    position_size = portfolio_size / len(stocks)
    stocks['Price'] = stocks['Symbol'].map(prices)
    stocks['Number of Shares to Buy'] = position_size / stocks['Price']
    return stocks

# Main function to run the Streamlit app
def main():
    st.title("S&P 500 Equal-Weight Portfolio Allocation")
    st.text("The S&P 500 is the worlds most popular stock market index. The largest fund that is benchmarked to this index is the SPDR® S&P 500® ETF Trust. It has more than US$250 billion of assets under management.The goal of this section of the course is to create a Python script that will accept the value of your portfolio and tell you how many shares of each S&P 500 constituent you should purchase to get an equal-weight version of the index fund.")

    portfolio_size = st.number_input("Enter the value of your portfolio:", min_value=0.0, step=1000.0)

    if portfolio_size > 0:
        if st.button("Calculate Recommended Trades"):
            with st.spinner("Fetching stock data..."):
                # Get the list of S&P 500 stocks
                stocks = get_sp500_stocks()

                # Fetch real-time prices
                prices = fetch_stock_prices(stocks)

                # Calculate the equal-weight allocations
                recommended_trades = calculate_equal_weight(portfolio_size, stocks, prices)

            st.success("Recommended trades calculated successfully!")
            st.write(recommended_trades[['Symbol', 'Price', 'Number of Shares to Buy']])
    else:
        st.warning("Please enter a valid portfolio size.")

if __name__ == "__main__":
    main()
